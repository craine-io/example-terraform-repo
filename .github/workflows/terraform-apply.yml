name: 'Terraform Apply'

on:
  pull_request:
    types: [closed]
    branches:
      - main

defaults:
  run:
    working-directory: '.'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    if: github.event.pull_request.merged == true

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan

    - name: Cost Guard - Block Expensive Resources
      run: |
        echo "üîç Checking for expensive resources..."
        
        # Get plan as text
        PLAN_TEXT=$(terraform show -no-color tfplan)
        
        # List of expensive resources to block
        BLOCKED_RESOURCES=(
          "aws_rds"
          "aws_db_instance"
          "aws_elasticsearch"
          "aws_nat_gateway"
          "aws_load_balancer"
          "aws_elb"
          "aws_alb"
          "aws_nlb"
          "large"
          "xlarge"
          "metal"
          "kubernetes_cluster"
          "container_cluster"
          "redshift"
          "emr_cluster"
        )
        
        # Check if any blocked resources are in the plan
        for resource in "${BLOCKED_RESOURCES[@]}"; do
          if echo "$PLAN_TEXT" | grep -qi "$resource"; then
            echo "‚ùå BLOCKED: Found expensive resource: $resource"
            echo "Only free-tier resources are allowed in this example repo."
            exit 1
          fi
        done
        
        echo "‚úÖ No expensive resources detected. Safe to deploy!"

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      run: terraform output
